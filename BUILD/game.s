;
; File generated by cc65 v 2.19 - Git 911ff40
;
	.fopt		compiler,"cc65 v 2.19 - Git 911ff40"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_pad_poll
	.import		_bank_spr
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_set_music_speed
	.import		_check_collision
	.import		_pal_fade_to
	.import		_set_scroll_x
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_title_screen
	.export		_sprPlayer
	.export		_sprEnemy
	.export		_sprStar
	.export		_sprCoin
	.export		_sprCoinsScore
	.export		_youText
	.export		_winText
	.export		_loseText
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_U
	.export		_eject_D
	.export		_direction
	.export		_song
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_index2
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_L_R_switch
	.export		_old_x
	.export		_temp_x
	.export		_temp_y
	.export		_game_mode
	.export		_coins
	.export		_pointer
	.export		_lives
	.export		_level
	.export		_offset
	.export		_level_up
	.export		_bright
	.export		_bright_count
	.export		_death
	.export		_timer
	.export		_enemy_frames
	.export		_map_loaded
	.export		_short_jump_count
	.export		_Generic
	.export		_Generic2
	.export		_PlayerGuy
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_active
	.export		_enemy_room
	.export		_enemy_actual_x
	.export		_shuffle_array
	.export		_coin_x
	.export		_coin_y
	.export		_coin_active
	.export		_coin_room
	.export		_coin_actual_x
	.export		_star_x
	.export		_star_y
	.export		_star_active
	.export		_star_room
	.export		_star_actual_x
	.export		_c_map
	.export		_c_map2
	.export		_show_title
	.export		_fade_in
	.export		_fade_out
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_bg_check_low
	.export		_bg_collision_sub
	.export		_bg_collision_fast
	.export		_draw_screen_R
	.export		_new_cmap
	.export		_get_position
	.export		_enemy_moves
	.export		_sprite_collisions
	.export		_check_spr_objects
	.export		_sprite_obj_init
	.export		_level_1_coins
	.export		_level_2_coins
	.export		_level_3_coins
	.export		_Coins_list
	.export		_level_1_enemies
	.export		_level_2_enemies
	.export		_level_3_enemies
	.export		_Enemy_list
	.export		_level_1_stars
	.export		_level_2_stars
	.export		_level_3_stars
	.export		_Stars_list
	.export		_metatiles1
	.export		_is_solid
	.export		_Level1_0
	.export		_Level1_1
	.export		_Level1_2
	.export		_Level1_list
	.export		_Level2_0
	.export		_Level2_1
	.export		_Level2_2
	.export		_Level2_list
	.export		_Level3_0
	.export		_Level3_1
	.export		_Level3_2
	.export		_Level3_list
	.export		_Levels_list
	.export		_Level_offsets
	.export		_palTitle
	.export		_main

.segment	"DATA"

_coins:
	.byte	$00

.segment	"RODATA"

_title_screen:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$81
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$02
	.byte	$D3
	.byte	$04
	.byte	$15
	.byte	$00
	.byte	$44
	.byte	$15
	.byte	$C1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$45
	.byte	$DD
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$0D
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$A0
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$02
	.byte	$00
_sprPlayer:
	.byte	$00
	.byte	$FF
	.byte	$49
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$4C
	.byte	$00
	.byte	$80
_sprEnemy:
	.byte	$00
	.byte	$FF
	.byte	$4D
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4F
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$50
	.byte	$00
	.byte	$80
_sprStar:
	.byte	$00
	.byte	$FF
	.byte	$9A
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$9C
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$9D
	.byte	$00
	.byte	$80
_sprCoin:
	.byte	$00
	.byte	$FF
	.byte	$45
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$48
	.byte	$00
	.byte	$80
_sprCoinsScore:
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$2F
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$29
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$2E
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$33
	.byte	$03
	.byte	$80
_youText:
	.byte	$00
	.byte	$00
	.byte	$39
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$2F
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$35
	.byte	$03
	.byte	$80
_winText:
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$29
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$2E
	.byte	$03
	.byte	$80
_loseText:
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$2F
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$33
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$25
	.byte	$03
	.byte	$80
_shuffle_array:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0D
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0C
	.byte	$0E
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$07
	.byte	$09
	.byte	$0B
	.byte	$0D
	.byte	$0F
	.byte	$0F
	.byte	$0D
	.byte	$0B
	.byte	$09
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$0E
	.byte	$0C
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$00
_level_1_coins:
	.byte	$60
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$E0
	.byte	$D0
	.byte	$01
	.byte	$10
	.byte	$A0
	.byte	$01
	.byte	$B0
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$40
	.byte	$02
	.byte	$30
	.byte	$70
	.byte	$02
	.byte	$A0
	.byte	$D0
	.byte	$02
	.byte	$C0
	.byte	$FF
_level_2_coins:
	.byte	$80
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$E0
	.byte	$50
	.byte	$01
	.byte	$30
	.byte	$A0
	.byte	$01
	.byte	$B0
	.byte	$60
	.byte	$02
	.byte	$10
	.byte	$80
	.byte	$02
	.byte	$E0
	.byte	$FF
_level_3_coins:
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$70
	.byte	$00
	.byte	$10
	.byte	$70
	.byte	$00
	.byte	$E0
	.byte	$90
	.byte	$01
	.byte	$20
	.byte	$30
	.byte	$01
	.byte	$40
	.byte	$30
	.byte	$01
	.byte	$E0
	.byte	$FF
_Coins_list:
	.addr	_level_1_coins
	.addr	_level_2_coins
	.addr	_level_3_coins
_level_1_enemies:
	.byte	$D0
	.byte	$00
	.byte	$D0
	.byte	$D0
	.byte	$01
	.byte	$80
	.byte	$D0
	.byte	$02
	.byte	$70
	.byte	$FF
_level_2_enemies:
	.byte	$D0
	.byte	$00
	.byte	$90
	.byte	$D0
	.byte	$01
	.byte	$A0
	.byte	$D0
	.byte	$02
	.byte	$30
	.byte	$D0
	.byte	$02
	.byte	$A0
	.byte	$FF
_level_3_enemies:
	.byte	$D0
	.byte	$00
	.byte	$B0
	.byte	$D0
	.byte	$02
	.byte	$20
	.byte	$D0
	.byte	$02
	.byte	$A0
	.byte	$FF
_Enemy_list:
	.addr	_level_1_enemies
	.addr	_level_2_enemies
	.addr	_level_3_enemies
_level_1_stars:
	.byte	$D0
	.byte	$02
	.byte	$E0
	.byte	$FF
_level_2_stars:
	.byte	$30
	.byte	$02
	.byte	$E0
	.byte	$FF
_level_3_stars:
	.byte	$30
	.byte	$02
	.byte	$10
	.byte	$FF
_Stars_list:
	.addr	_level_1_stars
	.addr	_level_2_stars
	.addr	_level_3_stars
_metatiles1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$01
_is_solid:
	.byte	$00
	.byte	$40
_Level1_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level1_list:
	.addr	_Level1_0
	.addr	_Level1_1
	.addr	_Level1_2
_Level2_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level2_list:
	.addr	_Level2_0
	.addr	_Level2_1
	.addr	_Level2_2
_Level3_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Level3_list:
	.addr	_Level3_0
	.addr	_Level3_1
	.addr	_Level3_2
_Levels_list:
	.addr	_Level1_0
	.addr	_Level1_1
	.addr	_Level1_2
	.addr	_Level2_0
	.addr	_Level2_1
	.addr	_Level2_2
	.addr	_Level3_0
	.addr	_Level3_1
	.addr	_Level3_2
_Level_offsets:
	.byte	$00
	.byte	$03
	.byte	$06
_palTitle:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$30
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_U:
	.res	1,$00
_eject_D:
	.res	1,$00
_direction:
	.res	1,$00
_song:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_room:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_game_mode:
	.res	1,$00
_pointer:
	.res	2,$00
_lives:
	.res	1,$00
_level:
	.res	1,$00
_offset:
	.res	1,$00
_level_up:
	.res	1,$00
_bright:
	.res	1,$00
_bright_count:
	.res	1,$00
_death:
	.res	1,$00
_timer:
	.res	1,$00
_enemy_frames:
	.res	1,$00
_map_loaded:
	.res	1,$00
_short_jump_count:
	.res	1,$00
.segment	"BSS"
_Generic:
	.res	4,$00
_Generic2:
	.res	4,$00
_PlayerGuy:
	.res	8,$00
_enemy_x:
	.res	16,$00
_enemy_y:
	.res	16,$00
_enemy_active:
	.res	16,$00
_enemy_room:
	.res	16,$00
_enemy_actual_x:
	.res	16,$00
_coin_x:
	.res	16,$00
_coin_y:
	.res	16,$00
_coin_active:
	.res	16,$00
_coin_room:
	.res	16,$00
_coin_actual_x:
	.res	16,$00
_star_x:
	.res	2,$00
_star_y:
	.res	2,$00
_star_active:
	.res	2,$00
_star_room:
	.res	2,$00
_star_actual_x:
	.res	2,$00
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_wait:
	.res	1,$00
_frame_cnt:
	.res	1,$00
_iy:
	.res	2,$00
_dy:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ show_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title: near

.segment	"CODE"

;
; song = 0;
;
	lda     #$00
	sta     _song
;
; game_mode = MODE_TITLE;
;
	sta     _game_mode
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; music_play(song);
;
	lda     _song
	jmp     _music_play

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for(vb=0; vb<=4; vb++) {
;
	jsr     decsp1
	lda     #$00
	tay
L0006:	sta     (sp),y
	cmp     #$05
	bcs     L0003
;
; pal_bright(vb);
;
	lda     (sp),y
	jsr     _pal_bright
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; for(vb=0; vb<=4; vb++) {
;
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0006
;
; }
;
L0003:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for ( vb =4; vb!=0; vb--) {
;
	jsr     decsp1
	lda     #$04
	ldy     #$00
L0006:	sta     (sp),y
	lda     (sp),y
	beq     L0008
;
; pal_bright(vb);
;
	jsr     _pal_bright
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; for ( vb =4; vb!=0; vb--) {
;
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L0006
;
; pal_bright(0);
;
L0008:	jsr     _pal_bright
;
; set_vram_update(NULL);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; offset = Level_offsets[level];
;
	ldy     _level
	lda     _Level_offsets,y
	sta     _offset
;
; set_data_pointer(Levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L0019
	inx
	clc
L0019:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1);
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0017:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0016:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L001C
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0016
;
; if (y == 0xe0) break;
;
L001C:	lda     _y
	cmp     #$E0
	beq     L001D
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0017
;
; ++offset;
;
L001D:	inc     _offset
;
; set_data_pointer(Levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L001A
	inx
	clc
L001A:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0018:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0) break;
;
	lda     _y
	cmp     #$E0
	beq     L001E
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0018
;
; --offset;
;
L001E:	dec     _offset
;
; memcpy (c_map, Levels_list[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L001B
	inx
	clc
L001B:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; sprite_obj_init();
;
	jsr     _sprite_obj_init
;
; PlayerGuy.x = 0x4000;
;
	ldx     #$40
	lda     #$00
	sta     _PlayerGuy
	stx     _PlayerGuy+1
;
; PlayerGuy.y = 0xb400;
;
	ldx     #$B4
	sta     _PlayerGuy+2
	stx     _PlayerGuy+2+1
;
; PlayerGuy.vel_x = 0;
;
	sta     _PlayerGuy+4
	sta     _PlayerGuy+4+1
;
; PlayerGuy.vel_y = 0;
;
	sta     _PlayerGuy+6
	sta     _PlayerGuy+6+1
;
; map_loaded = 0;
;
	sta     _map_loaded
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = high_byte(PlayerGuy.x);
;
	lda     _PlayerGuy+1
	sta     _temp_x
;
; if(temp_x > 0xfc) temp_x = 1;
;
	cmp     #$FD
	bcc     L002D
	lda     #$01
	sta     _temp_x
;
; if(temp_x == 0) temp_x = 1;
;
L002D:	lda     _temp_x
	bne     L002E
	lda     #$01
	sta     _temp_x
;
; oam_meta_spr(temp_x, high_byte(PlayerGuy.y), sprPlayer);
;
L002E:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _PlayerGuy+3
	dey
	sta     (sp),y
	lda     #<(_sprPlayer)
	ldx     #>(_sprPlayer)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_COINS; ++index){ 
;
	lda     #$00
	sta     _index
L002F:	lda     _index
	cmp     #$10
	bcs     L0007
;
; temp_y = coin_y[index];
;
	ldy     _index
	lda     _coin_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L0030
;
; if(get_frame_count() & 8) ++temp_y; // bounce the coin
;
	jsr     _get_frame_count
	and     #$08
	beq     L000C
	inc     _temp_y
;
; if(!coin_active[index]) continue;
;
L000C:	ldy     _index
	lda     _coin_active,y
	beq     L0030
;
; temp_x = coin_x[index];
;
	ldy     _index
	lda     _coin_x,y
	sta     _temp_x
;
; if(temp_x > 0xf0) continue;
;
	cmp     #$F1
	bcs     L0030
;
; if(temp_y < 0xf0) {
;
	lda     _temp_y
	cmp     #$F0
	bcs     L0030
;
; oam_meta_spr(temp_x, temp_y, sprCoin);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_sprCoin)
	ldx     #>(_sprCoin)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_COINS; ++index){ 
;
L0030:	inc     _index
	jmp     L002F
;
; offset = get_frame_count() & 3;
;
L0007:	jsr     _get_frame_count
	and     #$03
	sta     _offset
;
; offset = offset << 4; // * 16, the size of the shuffle array
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _offset
;
; for(index = 0; index < MAX_ENEMY; ++index) {
;
	lda     #$00
	sta     _index
L0031:	lda     _index
	cmp     #$10
	bcs     L0033
;
; index2 = shuffle_array[offset];
;
	ldy     _offset
	lda     _shuffle_array,y
	sta     _index2
;
; ++offset;
;
	inc     _offset
;
; temp_y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L0032
;
; if(!enemy_active[index]) continue;
;
	ldy     _index
	lda     _enemy_active,y
	beq     L0032
;
; temp_x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _temp_x
;
; if(temp_x == 0) continue;
;
	lda     _temp_x
	beq     L0032
;
; if(temp_x > 0xf0) continue;
;
	cmp     #$F1
	bcs     L0032
;
; if(temp_y < 0xf0) {
;
	lda     _temp_y
	cmp     #$F0
	bcs     L0032
;
; oam_meta_spr(temp_x, temp_y, sprEnemy);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_sprEnemy)
	ldx     #>(_sprEnemy)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_ENEMY; ++index) {
;
L0032:	inc     _index
	jmp     L0031
;
; for(index = 0; index < MAX_STARS; ++index) {
;
L0033:	lda     #$00
	sta     _index
L0034:	lda     _index
	cmp     #$02
	bcs     L0020
;
; temp_y = star_y[index];
;
	ldy     _index
	lda     _star_y,y
	sta     _temp_y
;
; if(temp_y == TURN_OFF) continue;
;
	cmp     #$FF
	beq     L0035
;
; if (!star_active[index]) continue;
;
	ldy     _index
	lda     _star_active,y
	beq     L0035
;
; temp_x = star_x[index];
;
	ldy     _index
	lda     _star_x,y
	sta     _temp_x
;
; if(temp_x > 0xf0) continue;
;
	cmp     #$F1
	bcs     L0035
;
; if(temp_y < 0xf0) {
;
	lda     _temp_y
	cmp     #$F0
	bcs     L0035
;
; oam_meta_spr(temp_x, temp_y, sprStar);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_sprStar)
	ldx     #>(_sprStar)
	jsr     _oam_meta_spr
;
; for(index = 0; index < MAX_STARS; ++index) {
;
L0035:	inc     _index
	jmp     L0034
;
; oam_meta_spr(16,16, sprCoinsScore);
;
L0020:	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_sprCoinsScore)
	ldx     #>(_sprCoinsScore)
	jsr     _oam_meta_spr
;
; temp1 = (coins / 10) + 0x10;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _temp1
;
; temp2 = (coins % 10) + 0x10;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _temp2
;
; oam_spr(64,16,temp1,3);
;
	jsr     decsp3
	lda     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(72,16,temp2,3);
;
	jsr     decsp3
	lda     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #$03
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = PlayerGuy.x;
;
	lda     _PlayerGuy+1
	sta     _old_x+1
	lda     _PlayerGuy
	sta     _old_x
;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L0036
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; if(PlayerGuy.x <= 0x100) {
;
	lda     _PlayerGuy+1
	cmp     #$01
	bne     L0004
	lda     _PlayerGuy
	cmp     #$01
L0004:	bcs     L0003
;
; PlayerGuy.vel_x = 0;
;
	lda     #$00
	sta     _PlayerGuy+4
	sta     _PlayerGuy+4+1
;
; PlayerGuy.x = 0x100;
;
	ldx     #$01
	sta     _PlayerGuy
	stx     _PlayerGuy+1
;
; else if(PlayerGuy.x < 0x400) { // don't want to wrap around to the other side
;
	jmp     L000A
L0003:	ldx     _PlayerGuy+1
	cpx     #$04
	bcs     L0006
;
; PlayerGuy.vel_x = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; else {
;
	jmp     L0038
;
; PlayerGuy.vel_x = -SPEED;
;
L0006:	ldx     #$FE
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0041
L0036:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L0038
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; PlayerGuy.vel_x = SPEED;
;
	inx
L0041:	lda     #$80
;
; PlayerGuy.vel_x = 0;
;
L0038:	sta     _PlayerGuy+4
	stx     _PlayerGuy+4+1
;
; PlayerGuy.x += PlayerGuy.vel_x;
;
L000A:	lda     _PlayerGuy+4
	clc
	adc     _PlayerGuy
	sta     _PlayerGuy
	lda     _PlayerGuy+4+1
	adc     _PlayerGuy+1
	sta     _PlayerGuy+1
;
; if((PlayerGuy.x < 0x100)||(PlayerGuy.x > 0xf800)) { // make sure no wrap around to the other side
;
	ldx     _PlayerGuy+1
	cpx     #$01
	bcc     L0039
	lda     _PlayerGuy
	cmp     #$01
	lda     _PlayerGuy+1
	sbc     #$F8
	bcc     L003A
;
; PlayerGuy.x = 0x100;
;
L0039:	ldx     #$01
	lda     #$00
	sta     _PlayerGuy
	stx     _PlayerGuy+1
;
; L_R_switch = 1; // shinks the y values in bg_coll, less problems with head / feet collisions
;
L003A:	lda     #$01
	sta     _L_R_switch
;
; Generic.x = high_byte(PlayerGuy.x); // this is much faster than passing a pointer to PlayerGuy
;
	lda     _PlayerGuy+1
	sta     _Generic
;
; Generic.y = high_byte(PlayerGuy.y);
;
	lda     _PlayerGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_R && collision_L){ // if both true, probably half stuck in a wall
;
	lda     _collision_R
	beq     L000E
	lda     _collision_L
	beq     L000E
;
; PlayerGuy.x = old_x;
;
	lda     _old_x+1
	sta     _PlayerGuy+1
	lda     _old_x
	sta     _PlayerGuy
;
; else if(collision_L) {
;
	jmp     L0015
L000E:	lda     _collision_L
	beq     L0013
;
; high_byte(PlayerGuy.x) = high_byte(PlayerGuy.x) - eject_L;
;
	lda     _PlayerGuy+1
	sec
	sbc     _eject_L
;
; else if(collision_R) {
;
	jmp     L0042
L0013:	lda     _collision_R
	beq     L0015
;
; high_byte(PlayerGuy.x) = high_byte(PlayerGuy.x) - eject_R;
;
	lda     _PlayerGuy+1
	sec
	sbc     _eject_R
L0042:	sta     _PlayerGuy+1
;
; if(PlayerGuy.vel_y < 0x300){
;
L0015:	lda     _PlayerGuy+6
	cmp     #$00
	lda     _PlayerGuy+6+1
	sbc     #$03
	bvc     L0017
	eor     #$80
L0017:	bpl     L0016
;
; PlayerGuy.vel_y += GRAVITY;
;
	lda     #$50
	clc
	adc     _PlayerGuy+6
	sta     _PlayerGuy+6
	bcc     L0019
	inc     _PlayerGuy+6+1
;
; else{
;
	jmp     L0019
;
; PlayerGuy.vel_y = 0x300; 
;
L0016:	ldx     #$03
	lda     #$00
	sta     _PlayerGuy+6
	stx     _PlayerGuy+6+1
;
; PlayerGuy.y += PlayerGuy.vel_y;
;
L0019:	lda     _PlayerGuy+6
	clc
	adc     _PlayerGuy+2
	sta     _PlayerGuy+2
	lda     _PlayerGuy+6+1
	adc     _PlayerGuy+2+1
	sta     _PlayerGuy+2+1
;
; L_R_switch = 0;
;
	lda     #$00
	sta     _L_R_switch
;
; Generic.x = high_byte(PlayerGuy.x); 
;
	lda     _PlayerGuy+1
	sta     _Generic
;
; Generic.y = high_byte(PlayerGuy.y);
;
	lda     _PlayerGuy+3
	sta     _Generic+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U) {
;
	lda     _collision_U
	beq     L001A
;
; high_byte(PlayerGuy.y) = high_byte(PlayerGuy.y) - eject_U;
;
	lda     _PlayerGuy+3
	sec
	sbc     _eject_U
	sta     _PlayerGuy+3
;
; else if(collision_D) {
;
	jmp     L0043
L001A:	lda     _collision_D
	beq     L003B
;
; high_byte(PlayerGuy.y) = high_byte(PlayerGuy.y) - eject_D;
;
	lda     _PlayerGuy+3
	sec
	sbc     _eject_D
	sta     _PlayerGuy+3
;
; PlayerGuy.y &= 0xff00;
;
	ldx     _PlayerGuy+2+1
	lda     #$00
	sta     _PlayerGuy+2
	stx     _PlayerGuy+2+1
;
; if(PlayerGuy.vel_y > 0) {
;
	lda     _PlayerGuy+6
	cmp     #$01
	lda     _PlayerGuy+6+1
	sbc     #$00
	bvs     L001E
	eor     #$80
L001E:	bpl     L003B
;
; PlayerGuy.vel_y = 0;
;
L0043:	lda     #$00
	sta     _PlayerGuy+6
	sta     _PlayerGuy+6+1
;
; Generic.y = high_byte(PlayerGuy.y); // the rest should be the same
;
L003B:	lda     _PlayerGuy+3
	sta     _Generic+1
;
; bg_check_low();
;
	jsr     _bg_check_low
;
; if(collision_D) {
;
	lda     _collision_D
	beq     L0020
;
; if(pad1_new & PAD_A) {
;
	lda     _pad1_new
	and     #$80
	beq     L0020
;
; PlayerGuy.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FA
	lda     #$00
	sta     _PlayerGuy+6
	stx     _PlayerGuy+6+1
;
; short_jump_count = 1;
;
	lda     #$01
	sta     _short_jump_count
;
; if(short_jump_count){
;
L0020:	lda     _short_jump_count
	beq     L0022
;
; ++short_jump_count;
;
	inc     _short_jump_count
;
; if(short_jump_count > 30) short_jump_count = 0;
;
	lda     _short_jump_count
	cmp     #$1F
	bcc     L0022
	lda     #$00
	sta     _short_jump_count
;
; if((short_jump_count) && ((pad1 & PAD_A) == 0) && (PlayerGuy.vel_y < -0x200)){
;
L0022:	lda     _short_jump_count
	beq     L0023
	lda     _pad1
	and     #$80
	bne     L0023
	lda     _PlayerGuy+6
	cmp     #$00
	lda     _PlayerGuy+6+1
	sbc     #$FE
	bvc     L0026
	eor     #$80
L0026:	bpl     L0023
;
; PlayerGuy.vel_y = -0x200;
;
	ldx     #$FE
	lda     #$00
	sta     _PlayerGuy+6
	stx     _PlayerGuy+6+1
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; if((scroll_x & 0xff) < 4){
;
L0023:	lda     _scroll_x
	cmp     #$04
	bcs     L003E
;
; if (!map_loaded) {
;
	lda     _map_loaded
	bne     L002C
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1;
;
	lda     #$01
;
; } else {
;
	jmp     L0035
;
; map_loaded = 0;
;
L003E:	lda     #$00
L0035:	sta     _map_loaded
;
; if((scroll_x & 0xff) < 4){
;
L002C:	lda     _scroll_x
	cmp     #$04
	bcs     L002D
;
; new_cmap(); //
;
	jsr     _new_cmap
;
; temp5 = PlayerGuy.x;
;
L002D:	lda     _PlayerGuy+1
	sta     _temp5+1
	lda     _PlayerGuy
	sta     _temp5
;
; if (PlayerGuy.x > MAX_RIGHT){
;
	lda     _PlayerGuy
	cmp     #$01
	lda     _PlayerGuy+1
	sbc     #$B0
	bcc     L002F
;
; temp1 = (PlayerGuy.x - MAX_RIGHT) >> 8;
;
	lda     _PlayerGuy+1
	sec
	sbc     #$B0
	sta     _temp1
;
; scroll_x += temp1;
;
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(PlayerGuy.x) = high_byte(PlayerGuy.x) - temp1;
;
	lda     _PlayerGuy+1
	sec
	sbc     _temp1
	sta     _PlayerGuy+1
;
; if(scroll_x >= MAX_SCROLL) {
;
L002F:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$01
	bcc     L0031
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$01
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; PlayerGuy.x = temp5; // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _PlayerGuy+1
	lda     _temp5
	sta     _PlayerGuy
;
; if(high_byte(PlayerGuy.x) >= 0xf1) {
;
	lda     _PlayerGuy+1
	cmp     #$F1
	bcc     L0031
;
; PlayerGuy.x = 0xf100;
;
	ldx     #$F1
	lda     #$00
	sta     _PlayerGuy
	stx     _PlayerGuy+1
;
; }
;
L0031:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; if(Generic.y >= 0xf0) return;
;
	lda     _Generic+1
	cmp     #$F0
	bcc     L0017
;
; }
;
	rts
;
; temp6 = temp5 = Generic.x + scroll_x; // upper left (temp6 = save for reuse)
;
L0017:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	sta     _temp5
	stx     _temp5+1
	sta     _temp6
	stx     _temp6+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_L = temp1 | 0xf0;
;
	lda     _temp1
	ora     #$F0
	sta     _eject_L
;
; temp3 = Generic.y; // y top
;
	lda     _Generic+1
	sta     _temp3
;
; eject_U = temp3 | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L0003
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bg_collision_sub();
;
L0003:	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L0011
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp5 += Generic.width;
;
L0011:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_R = (temp1 + 1) & 0x0f;
;
	lda     _temp1
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L0012
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp3 = Generic.y + Generic.height; //y bottom
;
L0012:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp3
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L0013
	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
L0013:	lda     _temp3
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L000E
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L0014
;
; ++collision_R;
;
	inc     _collision_R
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
L0014:	lda     _collision
	and     #$C0
	beq     L000B
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = temp6 & 0xff; // low byte x
;
L000B:	lda     _temp6
	sta     _temp1
;
; temp2 = temp6 >> 8; // high byte x
;
	lda     _temp6+1
	sta     _temp2
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L0015
;
; ++collision_L;
;
	inc     _collision_L
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
L0015:	lda     _collision
	and     #$C0
	beq     L0016
;
; ++collision_D;
;
	inc     _collision_D
;
; if((temp3 & 0x0f) > 3) collision_D = 0; // for platforms, only collide with the top 3 pixels
;
L0016:	lda     _temp3
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L000F
	eor     #$80
L000F:	bpl     L000E
	lda     #$00
	sta     _collision_D
;
; }
;
L000E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_check_low (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_check_low: near

.segment	"CODE"

;
; collision_D = 0;
;
	lda     #$00
	sta     _collision_D
;
; temp5 = Generic.x + scroll_x;    //left
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
	pla
	sta     _temp5
;
; temp1 = temp5 & 0xff; //low byte
;
	sta     _temp1
;
; temp2 = temp5 >> 8; //high byte
;
	lda     _temp5+1
	sta     _temp2
;
; temp3 = Generic.y + Generic.height + 1; // bottom
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	bcc     L0009
	clc
L0009:	adc     #$01
	sta     _temp3
;
; if(temp3 >= 0xf0) return;
;
	cmp     #$F0
	bcs     L0006
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
	lda     _collision
	and     #$C0
	beq     L000A
;
; ++collision_D;
;
	inc     _collision_D
;
; temp5 += Generic.width;
;
L000A:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = temp5 & 0xff; //low byte
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; //high byte
;
	lda     _temp5+1
	sta     _temp2
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & (COL_DOWN|COL_ALL)){ // find a corner in the collision map
;
	lda     _collision
	and     #$C0
	beq     L000B
;
; ++collision_D;
;
	inc     _collision_D
;
; if((temp3 & 0x0f) > 3) collision_D = 0; // for platforms, only collide with the top 3 pixels
;
L000B:	lda     _temp3
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0007
	eor     #$80
L0007:	bpl     L0006
	lda     #$00
	sta     _collision_D
;
; }
;
L0006:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp2&1; // high byte
;
	lda     _temp2
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0002
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else{
;
	jmp     L0008
;
; collision = c_map2[coordinates];
;
L0002:	ldy     _coordinates
	lda     _c_map2,y
L0008:	sta     _collision
;
; collision = is_solid[collision];
;
	ldy     _collision
	lda     _is_solid,y
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_fast (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_fast: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; if(Generic.y >= 0xf0) return;
;
	lda     _Generic+1
	cmp     #$F0
	bcs     L0004
;
; temp6 = temp5 = Generic.x + scroll_x; // upper left (temp6 = save for reuse)
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	sta     _temp5
	stx     _temp5+1
	sta     _temp6
	stx     _temp6+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; temp3 = Generic.y; // y top
;
	lda     _Generic+1
	sta     _temp3
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L0005
;
; ++collision_L;
;
	inc     _collision_L
;
; temp5 += Generic.width;
;
L0005:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision & COL_ALL){ // find a corner in the collision map
;
	lda     _collision
	and     #$40
	beq     L0004
;
; ++collision_R;
;
	inc     _collision_R
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L0002
	inx
L0002:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; offset = Level_offsets[level];
;
	ldy     _level
	lda     _Level_offsets,y
	sta     _offset
;
; offset += temp1;
;
	lda     _temp1
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(Levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L0013
	inx
	clc
L0013:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L0006
	cmp     #$01
	beq     L0008
	cmp     #$02
	jeq     L000B
	jmp     L000E
;
; address = get_ppu_addr(nt, x, 0);
;
L0006:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L0018
;
; address = get_ppu_addr(nt, x, 0x40);
;
L0008:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L0018
;
; address = get_ppu_addr(nt, x, 0x80);
;
L000B:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L0018
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L000E:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L0018:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; room = ((scroll_x >> 8) +1); //high byte = room, one to the right
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room
;
; offset = Level_offsets[level];
;
	ldy     _level
	lda     _Level_offsets,y
	sta     _offset
;
; offset += room;
;
	lda     _room
	clc
	adc     _offset
	sta     _offset
;
; map = room & 1; //even or odd?
;
	lda     _room
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0004
;
; memcpy (c_map, Levels_list[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
;
; else{
;
	jmp     L001D
;
; memcpy (c_map2, Levels_list[offset], 240);
;
L0004:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
L001D:	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L000A
	inx
	clc
L000A:	adc     #<(_Levels_list)
	sta     ptr1
	txa
	adc     #>(_Levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; char __near__ get_position (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_position: near

.segment	"CODE"

;
; temp5 -= scroll_x;
;
	lda     _scroll_x
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_x+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;
;
	lda     _temp5
	ldx     #$00
	sta     _temp_x
;
; if(high_byte(temp5)) return 0;
;
	lda     _temp5+1
	beq     L0003
	txa
	rts
;
; return 1;
;
L0003:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_moves (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_moves: near

.segment	"CODE"

;
; Generic.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic
;
; Generic.y = enemy_y[index] + 6; // mid point
;
	ldy     _index
	lda     _enemy_y,y
	clc
	adc     #$06
	sta     _Generic+1
;
; Generic.width = 13;
;
	lda     #$0D
	sta     _Generic+2
;
; if(enemy_active[index]) {
;
	ldy     _index
	lda     _enemy_active,y
	bne     L0017
;
; }
;
	rts
;
; if(enemy_x[index] > Generic2.x) {
;
L0017:	ldy     _index
	lda     _enemy_x,y
	cmp     _Generic2
	bcc     L0007
	beq     L0007
;
; Generic.x -= 1;
;
	dec     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if(collision_L) return;
;
	lda     _collision_L
	beq     L0018
;
; }
;
	rts
;
; if(enemy_actual_x[index] == 0) --enemy_room[index];
;
L0018:	ldy     _index
	lda     _enemy_actual_x,y
	bne     L000A
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L000C
	inx
L000C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L000A:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L000D
	inx
L000D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
;
; else if(enemy_x[index] < Generic2.x){
;
	jmp     L0016
L0007:	ldy     _index
	lda     _enemy_x,y
	cmp     _Generic2
	bcs     L0013
;
; Generic.x += 1;
;
	inc     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if(collision_R) return;
;
	lda     _collision_R
	bne     L0013
;
; ++enemy_actual_x[index];
;
	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L0012
	inx
L0012:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if(enemy_actual_x[index] == 0) ++enemy_room[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L0013
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L0015
	inx
L0015:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
L0016:	sta     (ptr1),y
;
; }
;
L0013:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; Generic.x = high_byte(PlayerGuy.x);
;
	lda     _PlayerGuy+1
	sta     _Generic
;
; Generic.y = high_byte(PlayerGuy.y);
;
	lda     _PlayerGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; Generic2.width = COIN_WIDTH;
;
	lda     #$07
	sta     _Generic2+2
;
; Generic2.height = COIN_HEIGHT;
;
	lda     #$0B
	sta     _Generic2+3
;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L0023:	lda     _index
	cmp     #$10
	bcs     L0025
;
; if(coin_active[index]){
;
	ldy     _index
	lda     _coin_active,y
	beq     L0024
;
; Generic2.x = coin_x[index];
;
	ldy     _index
	lda     _coin_x,y
	sta     _Generic2
;
; Generic2.y = coin_y[index];
;
	ldy     _index
	lda     _coin_y,y
	sta     _Generic2+1
;
; if(check_collision(&Generic, &Generic2)) {
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L0024
;
; coin_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _coin_y,y
;
; ++coins;
;
	inc     _coins
;
; for(index = 0; index < MAX_COINS; ++index){
;
L0024:	inc     _index
	jmp     L0023
;
; Generic2.width = STAR_WIDTH;
;
L0025:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = STAR_HEIGHT;
;
	sta     _Generic2+3
;
; for(index = 0; index < MAX_STARS; ++index){
;
	lda     #$00
	sta     _index
L0026:	lda     _index
	cmp     #$02
	bcs     L0028
;
; if(star_active[index]){
;
	ldy     _index
	lda     _star_active,y
	beq     L0027
;
; Generic2.x = star_x[index];
;
	ldy     _index
	lda     _star_x,y
	sta     _Generic2
;
; Generic2.y = star_y[index];
;
	ldy     _index
	lda     _star_y,y
	sta     _Generic2+1
;
; if(check_collision(&Generic, &Generic2)) {
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L0027
;
; star_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _star_y,y
;
; ++level_up;
;
	inc     _level_up
;
; for(index = 0; index < MAX_STARS; ++index){
;
L0027:	inc     _index
	jmp     L0026
;
; Generic2.width = ENEMY_WIDTH;
;
L0028:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = ENEMY_HEIGHT;
;
	sta     _Generic2+3
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
	lda     #$00
	sta     _index
L0029:	lda     _index
	cmp     #$10
	bcs     L0017
;
; if(enemy_active[index]){
;
	ldy     _index
	lda     _enemy_active,y
	beq     L002B
;
; Generic2.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic2
;
; Generic2.y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _Generic2+1
;
; if(check_collision(&Generic, &Generic2)){
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L002B
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; if(coins) {
;
	lda     _coins
	beq     L002A
;
; --coins;
;
	dec     _coins
;
; if (coins > 0x80) coins = 0;
;
	lda     _coins
	cmp     #$81
	bcc     L002B
	lda     #$00
	sta     _coins
;
; } else {
;
	jmp     L002B
;
; ++death;
;
L002A:	inc     _death
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L002B:	inc     _index
	jmp     L0029
;
; }
;
L0017:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; Generic2.x = high_byte(PlayerGuy.x);
;
	lda     _PlayerGuy+1
	sta     _Generic2
;
; for(index = 0; index < MAX_COINS; ++index){
;
	lda     #$00
	sta     _index
L0024:	lda     _index
	cmp     #$10
	bcs     L0026
;
; coin_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _coin_active,y
;
; if(coin_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _coin_y,y
	cmp     #$FF
	beq     L0025
;
; high_byte(temp5) = coin_room[index];
;
	ldy     _index
	lda     _coin_room,y
	sta     _temp5+1
;
; low_byte(temp5) = coin_actual_x[index];
;
	ldy     _index
	lda     _coin_actual_x,y
	sta     _temp5
;
; coin_active[index] = get_position();
;
	lda     #<(_coin_active)
	ldx     #>(_coin_active)
	clc
	adc     _index
	bcc     L000B
	inx
L000B:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
;
; coin_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _coin_x,y
;
; for(index = 0; index < MAX_COINS; ++index){
;
L0025:	inc     _index
	jmp     L0024
;
; for(index = 0; index < MAX_STARS; ++index){
;
L0026:	lda     #$00
	sta     _index
L0027:	lda     _index
	cmp     #$02
	bcs     L0029
;
; star_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _star_active,y
;
; if(star_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _star_y,y
	cmp     #$FF
	beq     L0028
;
; high_byte(temp5) = star_room[index];
;
	ldy     _index
	lda     _star_room,y
	sta     _temp5+1
;
; low_byte(temp5) = star_actual_x[index];
;
	ldy     _index
	lda     _star_actual_x,y
	sta     _temp5
;
; star_active[index] = get_position();
;
	lda     #<(_star_active)
	ldx     #>(_star_active)
	clc
	adc     _index
	bcc     L0016
	inx
L0016:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
;
; star_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _star_x,y
;
; for(index = 0; index < MAX_STARS; ++index){
;
L0028:	inc     _index
	jmp     L0027
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L0029:	lda     #$00
	sta     _index
L002A:	lda     _index
	cmp     #$10
	bcs     L0019
;
; enemy_active[index] = 0; //default to zero
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; if(enemy_y[index] != TURN_OFF){
;
	ldy     _index
	lda     _enemy_y,y
	cmp     #$FF
	beq     L002B
;
; high_byte(temp5) = enemy_room[index];
;
	ldy     _index
	lda     _enemy_room,y
	sta     _temp5+1
;
; low_byte(temp5) = enemy_actual_x[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	sta     _temp5
;
; temp1 = enemy_active[index] = get_position();
;
	lda     #<(_enemy_active)
	ldx     #>(_enemy_active)
	clc
	adc     _index
	bcc     L0021
	inx
L0021:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
	sta     _temp1
;
; if(temp1 == 0) continue;
;
	lda     _temp1
	beq     L002B
;
; enemy_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _enemy_x,y
;
; enemy_moves(); // if active, do it's moves now
;
	jsr     _enemy_moves
;
; for(index = 0; index < MAX_ENEMY; ++index){
;
L002B:	inc     _index
	jmp     L002A
;
; }
;
L0019:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_obj_init: near

.segment	"CODE"

;
; pointer = Coins_list[level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L003E
	inx
	clc
L003E:	adc     #<(_Coins_list)
	sta     ptr1
	txa
	adc     #>(_Coins_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_COINS; ++index){
;
	tya
	sta     _index
	sta     _index2
L0041:	lda     _index
	cmp     #$10
	bcs     L0042
;
; coin_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _coin_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_y,y
;
; if(temp1 == TURN_OFF) break;
;
	lda     _temp1
	cmp     #$FF
	beq     L0042
;
; ++index2;
;
	inc     _index2
;
; coin_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _coin_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; coin_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _coin_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_COINS; ++index){
;
	inc     _index
	jmp     L0041
;
; for(++index;index < MAX_COINS; ++index){
;
L0042:	inc     _index
	ldx     #$00
	lda     _index
	cmp     #$10
	bcs     L0043
;
; coin_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _coin_y,y
;
; for(++index;index < MAX_COINS; ++index){
;
	jmp     L0042
;
; pointer = Stars_list[level];
;
L0043:	lda     _level
	asl     a
	bcc     L003F
	inx
	clc
L003F:	adc     #<(_Stars_list)
	sta     ptr1
	txa
	adc     #>(_Stars_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_STARS; ++index){
;
	tya
	sta     _index
	sta     _index2
L0044:	lda     _index
	cmp     #$02
	bcs     L0045
;
; star_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _star_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; star_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _star_y,y
;
; if(temp1 == TURN_OFF) break;
;
	lda     _temp1
	cmp     #$FF
	beq     L0045
;
; ++index2;
;
	inc     _index2
;
; star_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _star_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; star_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _star_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; star_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _star_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_STARS; ++index){
;
	inc     _index
	jmp     L0044
;
; for(++index;index < MAX_STARS; ++index){
;
L0045:	inc     _index
	ldx     #$00
	lda     _index
	cmp     #$02
	bcs     L0046
;
; star_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _star_y,y
;
; for(++index;index < MAX_STARS; ++index){
;
	jmp     L0045
;
; pointer = Enemy_list[level];
;
L0046:	lda     _level
	asl     a
	bcc     L0040
	inx
	clc
L0040:	adc     #<(_Enemy_list)
	sta     ptr1
	txa
	adc     #>(_Enemy_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	tya
	sta     _index
	sta     _index2
L0047:	lda     _index
	cmp     #$10
	bcs     L0048
;
; enemy_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_y,y
;
; if(temp1 == TURN_OFF) break;
;
	lda     _temp1
	cmp     #$FF
	beq     L0048
;
; ++index2;
;
	inc     _index2
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; for(index = 0,index2 = 0;index < MAX_ENEMY; ++index){
;
	inc     _index
	jmp     L0047
;
; for(++index;index < MAX_ENEMY; ++index){
;
L0048:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L002B
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; for(++index;index < MAX_ENEMY; ++index){
;
	jmp     L0048
;
; }
;
L002B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; pal_bg(palTitle);
;
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_bg
;
; pal_spr(palTitle);
;
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; show_title();
;
	jsr     _show_title
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; scroll_x = 0;
;
	ldx     #$00
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; iy = 220 << FP_BITS;
;
	ldx     #$0D
	lda     #$C0
	sta     _iy
	stx     _iy+1
;
; while(game_mode == MODE_TITLE) {
;
	jmp     L002B
;
; ppu_wait_frame();
;
L0008:	jsr     _ppu_wait_frame
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START) 
;
	and     #$10
	beq     L000B
;
; pal_fade_to(4, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off();
;
	jsr     _ppu_off
;
; load_room();
;
	jsr     _load_room
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; music_play(song+1);
;
	lda     _song
	clc
	adc     #$01
	jsr     _music_play
;
; scroll_x = 0;
;
	ldx     #$00
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; break;
;
	jmp     L002B
;
; iy+=dy;
;
L000B:	lda     _dy
	clc
	adc     _iy
	sta     _iy
	lda     _dy+1
	adc     _iy+1
	sta     _iy+1
;
; if(iy<0)
;
	ldx     _iy+1
	cpx     #$80
	bcc     L000D
;
; iy =0;
;
	lda     #$00
	sta     _iy
	sta     _iy+1
;
; dy=-dy>>1;
;
	lda     _dy
	ldx     _dy+1
	jsr     negax
	jsr     asrax1
	sta     _dy
	stx     _dy+1
;
; if(wait)
;
L000D:	lda     _wait
	beq     L000E
;
; --wait;
;
	dec     _wait
;
; else
;
	jmp     L0008
;
; pal_col(10,(frame_cnt&32)?0x0f:0x20);
;
L000E:	lda     #$0A
	jsr     pusha
	lda     _frame_cnt
	and     #$20
	beq     L0029
	lda     #$0F
	jmp     L002A
L0029:	lda     #$20
L002A:	jsr     _pal_col
;
; ++frame_cnt;
;
	inc     _frame_cnt
;
; while(1) {
;
	jmp     L0008
;
; while(game_mode == MODE_TITLE) {
;
L002B:	lda     _game_mode
	jeq     L0008
;
; while (game_mode == MODE_GAME) 
;
	jmp     L002C
;
; ppu_wait_nmi();
;
L0012:	jsr     _ppu_wait_nmi
;
; set_music_speed(8);
;
	lda     #$08
	jsr     _set_music_speed
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; check_spr_objects();
;
	jsr     _check_spr_objects
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (level_up) {
;
	lda     _level_up
	beq     L0015
;
; game_mode = MODE_SWITCH;
;
	lda     #$04
	sta     _game_mode
;
; level_up = 0;
;
	lda     #$00
	sta     _level_up
;
; bright = 4;
;
	lda     #$04
	sta     _bright
;
; bright_count = 0;
;
	lda     #$00
	sta     _bright_count
;
; ++level;
;
	inc     _level
;
; } else if (death) {
;
	jmp     L002C
L0015:	lda     _death
	beq     L002C
;
; death = 0;
;
	lda     #$00
	sta     _death
;
; bright = 0;
;
	sta     _bright
;
; scroll_x = 0;
;
	tax
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; ppu_off();
;
	jsr     _ppu_off
;
; delay(5);
;
	lda     #$05
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; game_mode = MODE_GAME_OVER;
;
	lda     #$03
	sta     _game_mode
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; while (game_mode == MODE_GAME) 
;
L002C:	lda     _game_mode
	cmp     #$01
	jeq     L0012
;
; while (game_mode == MODE_SWITCH) {
;
	jmp     L002E
;
; ppu_wait_nmi();
;
L0018:	jsr     _ppu_wait_nmi
;
; ++bright_count;
;
	inc     _bright_count
;
; if(bright_count >= 0x10) { // fade out
;
	lda     _bright_count
	cmp     #$10
	bcc     L001C
;
; bright_count = 0;
;
	lda     #$00
	sta     _bright_count
;
; --bright;
;
	dec     _bright
;
; if(bright != 0xff) pal_bright(bright); // fade out
;
	lda     _bright
	cmp     #$FF
	beq     L001C
	jsr     _pal_bright
;
; set_scroll_x(scroll_x);
;
L001C:	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; if(bright == 0xff) { // now switch rooms
;
	lda     _bright
	cmp     #$FF
	bne     L002E
;
; ppu_off();
;
	jsr     _ppu_off
;
; oam_clear();
;
	jsr     _oam_clear
;
; scroll_x = 0;
;
	ldx     #$00
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; if(level < 3) {
;
	lda     _level
	cmp     #$03
	bcs     L002D
;
; load_room();
;
	jsr     _load_room
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; else { // set end of game. Did we win?
;
	jmp     L0032
;
; game_mode = MODE_END;
;
L002D:	lda     #$02
	sta     _game_mode
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; ppu_on_all();
;
L0032:	jsr     _ppu_on_all
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; while (game_mode == MODE_SWITCH) {
;
L002E:	lda     _game_mode
	cmp     #$04
	beq     L0018
;
; while (game_mode == MODE_END) { 
;
	jmp     L002F
;
; ppu_wait_nmi();
;
L0020:	jsr     _ppu_wait_nmi
;
; temp1 = (coins / 10) + 0x10;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _temp1
;
; temp2 = (coins % 10) + 0x10;
;
	lda     _coins
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _temp2
;
; oam_meta_spr(90, 100, youText);
;
	jsr     decsp2
	lda     #$5A
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_youText)
	ldx     #>(_youText)
	jsr     _oam_meta_spr
;
; oam_meta_spr(120, 100, winText);
;
	jsr     decsp2
	lda     #$78
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_winText)
	ldx     #>(_winText)
	jsr     _oam_meta_spr
;
; oam_meta_spr(85, 150, sprCoinsScore);
;
	jsr     decsp2
	lda     #$55
	ldy     #$01
	sta     (sp),y
	lda     #$96
	dey
	sta     (sp),y
	lda     #<(_sprCoinsScore)
	ldx     #>(_sprCoinsScore)
	jsr     _oam_meta_spr
;
; oam_spr(131,150,temp1,3);
;
	jsr     decsp3
	lda     #$83
	ldy     #$02
	sta     (sp),y
	lda     #$96
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(139,150,temp2,3);
;
	jsr     decsp3
	lda     #$8B
	ldy     #$02
	sta     (sp),y
	lda     #$96
	dey
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; set_scroll_x(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_x
;
; music_stop();
;
	jsr     _music_stop
;
; while (game_mode == MODE_END) { 
;
L002F:	lda     _game_mode
	cmp     #$02
	jeq     L0020
;
; while (game_mode == MODE_GAME_OVER) {
;
	jmp     L0030
;
; ppu_wait_nmi();
;
L0025:	jsr     _ppu_wait_nmi
;
; oam_meta_spr(90, 100, youText);
;
	jsr     decsp2
	lda     #$5A
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_youText)
	ldx     #>(_youText)
	jsr     _oam_meta_spr
;
; oam_meta_spr(120, 100, loseText); 
;
	jsr     decsp2
	lda     #$78
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_loseText)
	ldx     #>(_loseText)
	jsr     _oam_meta_spr
;
; set_scroll_x(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_x
;
; music_stop();
;
	jsr     _music_stop
;
; while (game_mode == MODE_GAME_OVER) {
;
L0030:	lda     _game_mode
	cmp     #$03
	beq     L0025
;
; while(1) {
;
	jmp     L002B

.endproc

