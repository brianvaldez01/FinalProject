;
; File generated by cc65 v 2.19 - Git 911ff40
;
	.fopt		compiler,"cc65 v 2.19 - Git 911ff40"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_pad_poll
	.import		_pad_trigger
	.import		_bank_spr
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_set_music_speed
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_beep
	.export		_sprPlayer
	.export		_sprGhost
	.export		_sprCoin
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_U
	.export		_eject_D
	.export		_direction
	.export		_song
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_L_R_switch
	.export		_old_x
	.export		_old_y
	.export		_Generic
	.export		_PlayerGuy
	.export		_metatiles1
	.export		_c_map
	.export		_c_map2
	.export		_which_bg
	.export		_p_maps
	.export		_room1
	.export		_room2
	.export		_room3
	.export		_Rooms
	.export		_show_title
	.export		_fade_in
	.export		_fade_out
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_bg_collision_sub
	.export		_draw_screen_R
	.export		_new_cmap
	.export		_palTitle
	.export		_main

.segment	"DATA"

_PlayerGuy:
	.word	$4000
	.word	$C400
	.res	4,$00

.segment	"RODATA"

_beep:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$81
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$02
	.byte	$D3
	.byte	$04
	.byte	$15
	.byte	$00
	.byte	$44
	.byte	$15
	.byte	$C1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$45
	.byte	$DD
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$0D
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$A0
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$02
	.byte	$00
_sprPlayer:
	.byte	$00
	.byte	$FF
	.byte	$49
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$4C
	.byte	$00
	.byte	$80
_sprGhost:
	.byte	$00
	.byte	$FF
	.byte	$4D
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4F
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$50
	.byte	$00
	.byte	$80
_sprCoin:
	.byte	$00
	.byte	$FF
	.byte	$45
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$48
	.byte	$00
	.byte	$80
_metatiles1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$01
_room1:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_room2:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_room3:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_Rooms:
	.addr	_room1
	.addr	_room2
	.addr	_room3
_palTitle:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$30
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_U:
	.res	1,$00
_eject_D:
	.res	1,$00
_direction:
	.res	1,$00
_song:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_room:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
.segment	"BSS"
_Generic:
	.res	4,$00
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_which_bg:
	.res	1,$00
_p_maps:
	.res	2,$00
_wait:
	.res	1,$00
_frame_cnt:
	.res	1,$00
_iy:
	.res	2,$00
_dy:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ show_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(beep);
;
	lda     #<(_beep)
	ldx     #>(_beep)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; iy=220<<FP_BITS;
;
	ldx     #$0D
	lda     #$C0
	sta     _iy
	stx     _iy+1
;
; ppu_wait_frame();
;
L0002:	jsr     _ppu_wait_frame
;
; if (pad_trigger(0)&PAD_START) 
;
	lda     #$00
	jsr     _pad_trigger
	and     #$10
;
; {break;}
;
	bne     L0003
;
; iy+=dy;//
;
	lda     _dy
	clc
	adc     _iy
	sta     _iy
	lda     _dy+1
	adc     _iy+1
	sta     _iy+1
;
; if(iy<0)//
;
	ldx     _iy+1
	cpx     #$80
	bcc     L0006
;
; iy =0;//
;
	lda     #$00
	sta     _iy
	sta     _iy+1
;
; dy=-dy>>1;//
;
	lda     _dy
	ldx     _dy+1
	jsr     negax
	jsr     asrax1
	sta     _dy
	stx     _dy+1
;
; if(wait)//
;
L0006:	lda     _wait
	beq     L0007
;
; --wait;//
;
	dec     _wait
;
; else//
;
	jmp     L0002
;
; pal_col(10,(frame_cnt&32)?0x0f:0x20);//
;
L0007:	lda     #$0A
	jsr     pusha
	lda     _frame_cnt
	and     #$20
	beq     L000B
	lda     #$0F
	jmp     L000C
L000B:	lda     #$20
L000C:	jsr     _pal_col
;
; ++frame_cnt;//
;
	inc     _frame_cnt
;
; while(1) {
;
	jmp     L0002
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for(vb=0; vb<=4; vb++) {
;
	jsr     decsp1
	lda     #$00
	tay
L0006:	sta     (sp),y
	cmp     #$05
	bcs     L0003
;
; pal_bright(vb);
;
	lda     (sp),y
	jsr     _pal_bright
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; for(vb=0; vb<=4; vb++) {
;
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0006
;
; }
;
L0003:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for ( vb =4; vb!=0; vb--) {
;
	jsr     decsp1
	lda     #$04
	ldy     #$00
L0006:	sta     (sp),y
	lda     (sp),y
	beq     L0008
;
; pal_bright(vb);
;
	jsr     _pal_bright
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; for ( vb =4; vb!=0; vb--) {
;
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L0006
;
; pal_bright(0);
;
L0008:	jsr     _pal_bright
;
; set_vram_update(NULL);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(Rooms[0]);
;
	lda     _Rooms
	ldx     _Rooms+1
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1);
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0014:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0013:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L0016
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0013
;
; if (y == 0xe0) break;
;
L0016:	lda     _y
	cmp     #$E0
	beq     L0003
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0014
;
; set_data_pointer(Rooms[1]);
;
L0003:	lda     _Rooms+2
	ldx     _Rooms+2+1
	jsr     _set_data_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0015:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0) break;
;
	lda     _y
	cmp     #$E0
	beq     L000D
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0015
;
; memcpy (c_map, room1, 240);
;
L000D:	ldy     #$00
L0011:	lda     _room1,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L0011
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(high_byte(PlayerGuy.x), high_byte(PlayerGuy.y), sprPlayer);
;
	jsr     decsp2
	lda     _PlayerGuy+1
	ldy     #$01
	sta     (sp),y
	lda     _PlayerGuy+3
	dey
	sta     (sp),y
	lda     #<(_sprPlayer)
	ldx     #>(_sprPlayer)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = PlayerGuy.x;
;
	lda     _PlayerGuy+1
	sta     _old_x+1
	lda     _PlayerGuy
	sta     _old_x
;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L0037
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; if(PlayerGuy.x <= 0x100) {
;
	lda     _PlayerGuy+1
	cmp     #$01
	bne     L0004
	lda     _PlayerGuy
	cmp     #$01
L0004:	bcs     L0003
;
; PlayerGuy.vel_x = 0;
;
	lda     #$00
	sta     _PlayerGuy+4
	sta     _PlayerGuy+4+1
;
; PlayerGuy.x = 0x100;
;
	ldx     #$01
	sta     _PlayerGuy
	stx     _PlayerGuy+1
;
; else if(PlayerGuy.x < 0x400) { // don't want to wrap around to the other side
;
	jmp     L000A
L0003:	ldx     _PlayerGuy+1
	cpx     #$04
	bcs     L0006
;
; PlayerGuy.vel_x = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; else {
;
	jmp     L0039
;
; PlayerGuy.vel_x = -SPEED;
;
L0006:	ldx     #$FE
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0044
L0037:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L0039
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; PlayerGuy.vel_x = SPEED;
;
	inx
L0044:	lda     #$80
;
; PlayerGuy.vel_x = 0;
;
L0039:	sta     _PlayerGuy+4
	stx     _PlayerGuy+4+1
;
; PlayerGuy.x += PlayerGuy.vel_x;
;
L000A:	lda     _PlayerGuy+4
	clc
	adc     _PlayerGuy
	sta     _PlayerGuy
	lda     _PlayerGuy+4+1
	adc     _PlayerGuy+1
	sta     _PlayerGuy+1
;
; if((PlayerGuy.x < 0x100)||(PlayerGuy.x > 0xf800)) { // make sure no wrap around to the other side
;
	ldx     _PlayerGuy+1
	cpx     #$01
	bcc     L003A
	lda     _PlayerGuy
	cmp     #$01
	lda     _PlayerGuy+1
	sbc     #$F8
	bcc     L003B
;
; PlayerGuy.x = 0x100;
;
L003A:	ldx     #$01
	lda     #$00
	sta     _PlayerGuy
	stx     _PlayerGuy+1
;
; L_R_switch = 1; // shinks the y values in bg_coll, less problems with head / feet collisions
;
L003B:	lda     #$01
	sta     _L_R_switch
;
; Generic.x = high_byte(PlayerGuy.x); // this is much faster than passing a pointer to PlayerGuy
;
	lda     _PlayerGuy+1
	sta     _Generic
;
; Generic.y = high_byte(PlayerGuy.y);
;
	lda     _PlayerGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_R && collision_L){ // if both true, probably half stuck in a wall
;
	lda     _collision_R
	beq     L000E
	lda     _collision_L
	beq     L000E
;
; PlayerGuy.x = old_x;
;
	lda     _old_x+1
	sta     _PlayerGuy+1
	lda     _old_x
	sta     _PlayerGuy
;
; else if(collision_L) {
;
	jmp     L0015
L000E:	lda     _collision_L
	beq     L0013
;
; high_byte(PlayerGuy.x) = high_byte(PlayerGuy.x) - eject_L;
;
	lda     _PlayerGuy+1
	sec
	sbc     _eject_L
;
; else if(collision_R) {
;
	jmp     L0045
L0013:	lda     _collision_R
	beq     L0015
;
; high_byte(PlayerGuy.x) = high_byte(PlayerGuy.x) - eject_R;
;
	lda     _PlayerGuy+1
	sec
	sbc     _eject_R
L0045:	sta     _PlayerGuy+1
;
; old_y = PlayerGuy.y; // didn't end up using the old value
;
L0015:	lda     _PlayerGuy+2+1
	sta     _old_y+1
	lda     _PlayerGuy+2
	sta     _old_y
;
; if(pad1 & PAD_UP){
;
	lda     _pad1
	and     #$08
	beq     L003C
;
; if(PlayerGuy.y <= 0x100) {
;
	lda     _PlayerGuy+2+1
	cmp     #$01
	bne     L0018
	lda     _PlayerGuy+2
	cmp     #$01
L0018:	bcs     L0017
;
; PlayerGuy.vel_y = 0;
;
	lda     #$00
	sta     _PlayerGuy+6
	sta     _PlayerGuy+6+1
;
; PlayerGuy.y = 0x100;
;
	ldx     #$01
	sta     _PlayerGuy+2
	stx     _PlayerGuy+2+1
;
; else if(PlayerGuy.y < 0x400) { // don't want to wrap around to the other side
;
	jmp     L0022
L0017:	ldx     _PlayerGuy+2+1
	cpx     #$04
	bcs     L001A
;
; PlayerGuy.vel_y = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; else {
;
	jmp     L003E
;
; PlayerGuy.vel_y = -SPEED;
;
L001A:	ldx     #$FE
;
; else if (pad1 & PAD_DOWN) 
;
	jmp     L0046
L003C:	lda     _pad1
	ldx     #$00
	and     #$04
	beq     L003E
;
; if(PlayerGuy.y >= 0xe000) {
;
	lda     _PlayerGuy+2
	cmp     #$00
	lda     _PlayerGuy+2+1
	sbc     #$E0
	bcc     L001E
;
; PlayerGuy.vel_y = 0;
;
	txa
	sta     _PlayerGuy+6
	sta     _PlayerGuy+6+1
;
; PlayerGuy.y = 0xe000;
;
	ldx     #$E0
	sta     _PlayerGuy+2
	stx     _PlayerGuy+2+1
;
; else if(PlayerGuy.y > 0xdc00) { // don't want to wrap around to the other side
;
	jmp     L0022
L001E:	lda     _PlayerGuy+2
	cmp     #$01
	lda     _PlayerGuy+2+1
	sbc     #$DC
	bcc     L0020
;
; PlayerGuy.vel_y = 0x100;
;
	inx
	lda     #$00
;
; else {
;
	jmp     L003E
;
; PlayerGuy.vel_y = SPEED;
;
L0020:	inx
L0046:	lda     #$80
;
; PlayerGuy.vel_y = 0;
;
L003E:	sta     _PlayerGuy+6
	stx     _PlayerGuy+6+1
;
; PlayerGuy.y += PlayerGuy.vel_y;
;
L0022:	lda     _PlayerGuy+6
	clc
	adc     _PlayerGuy+2
	sta     _PlayerGuy+2
	lda     _PlayerGuy+6+1
	adc     _PlayerGuy+2+1
	sta     _PlayerGuy+2+1
;
; if ((PlayerGuy.y < 0x100)||(PlayerGuy.y > 0xf000)) { // make sure no wrap around to the other side
;
	ldx     _PlayerGuy+2+1
	cpx     #$01
	bcc     L003F
	lda     _PlayerGuy+2
	cmp     #$01
	lda     _PlayerGuy+2+1
	sbc     #$F0
	bcs     L003F
	lda     #$00
	jmp     L0041
;
; PlayerGuy.y = 0x100;
;
L003F:	ldx     #$01
	lda     #$00
	sta     _PlayerGuy+2
	stx     _PlayerGuy+2+1
;
; L_R_switch = 0; // shinks the y values in bg_coll, less problems with head / feet collisions
;
L0041:	sta     _L_R_switch
;
; Generic.x = high_byte(PlayerGuy.x); // this is much faster than passing a pointer to PlayerGuy
;
	lda     _PlayerGuy+1
	sta     _Generic
;
; Generic.y = high_byte(PlayerGuy.y);
;
	lda     _PlayerGuy+3
	sta     _Generic+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U && collision_D){ // if both true, probably half stuck in a wall
;
	lda     _collision_U
	beq     L0026
	lda     _collision_D
	beq     L0026
;
; PlayerGuy.y = old_y;
;
	lda     _old_y+1
	sta     _PlayerGuy+2+1
	lda     _old_y
	sta     _PlayerGuy+2
;
; else if(collision_U) {
;
	jmp     L002D
L0026:	lda     _collision_U
	beq     L002B
;
; high_byte(PlayerGuy.y) = high_byte(PlayerGuy.y) - eject_U;
;
	lda     _PlayerGuy+3
	sec
	sbc     _eject_U
;
; else if(collision_D) {
;
	jmp     L0047
L002B:	lda     _collision_D
	beq     L002D
;
; high_byte(PlayerGuy.y) = high_byte(PlayerGuy.y) - eject_D;
;
	lda     _PlayerGuy+3
	sec
	sbc     _eject_D
L0047:	sta     _PlayerGuy+3
;
; if((scroll_x & 0xff) < 4){
;
L002D:	lda     _scroll_x
	cmp     #$04
	bcs     L002E
;
; new_cmap(); //
;
	jsr     _new_cmap
;
; temp5 = PlayerGuy.x;
;
L002E:	lda     _PlayerGuy+1
	sta     _temp5+1
	lda     _PlayerGuy
	sta     _temp5
;
; if (PlayerGuy.x > MAX_RIGHT){
;
	lda     _PlayerGuy
	cmp     #$01
	lda     _PlayerGuy+1
	sbc     #$B0
	bcc     L0030
;
; temp1 = (PlayerGuy.x - MAX_RIGHT) >> 8;
;
	lda     _PlayerGuy+1
	sec
	sbc     #$B0
	sta     _temp1
;
; scroll_x += temp1;
;
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(PlayerGuy.x) = high_byte(PlayerGuy.x) - temp1;
;
	lda     _PlayerGuy+1
	sec
	sbc     _temp1
	sta     _PlayerGuy+1
;
; if(scroll_x >= MAX_SCROLL) {
;
L0030:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$01
	bcc     L0032
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$01
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; PlayerGuy.x = temp5; // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _PlayerGuy+1
	lda     _temp5
	sta     _PlayerGuy
;
; if(high_byte(PlayerGuy.x) >= 0xf1) {
;
	lda     _PlayerGuy+1
	cmp     #$F1
	bcc     L0032
;
; PlayerGuy.x = 0xf100;
;
	ldx     #$F1
	lda     #$00
	sta     _PlayerGuy
	stx     _PlayerGuy+1
;
; } 
;
L0032:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; if(Generic.y >= 0xf0) return;
;
	lda     _Generic+1
	cmp     #$F0
	bcc     L000E
;
; }
;
	rts
;
; temp6 = temp5 = Generic.x + scroll_x; // upper left (temp6 = save for reuse)
;
L000E:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	sta     _temp5
	stx     _temp5+1
	sta     _temp6
	stx     _temp6+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_L = temp1 | 0xf0;
;
	lda     _temp1
	ora     #$F0
	sta     _eject_L
;
; temp3 = Generic.y; // y top
;
	lda     _Generic+1
	sta     _temp3
;
; eject_U = temp3 | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L0003
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bg_collision_sub();
;
L0003:	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L0004
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp5 += Generic.width;
;
L0004:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = temp5 & 0xff; // low byte x
;
	lda     _temp5
	sta     _temp1
;
; temp2 = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp2
;
; eject_R = (temp1 + 1) & 0x0f;
;
	lda     _temp1
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L0006
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp3 = Generic.y + Generic.height; //y bottom
;
L0006:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp3
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L000D
	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
L000D:	lda     _temp3
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L000B
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L000A
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = temp6 & 0xff; // low byte x
;
L000A:	lda     _temp6
	sta     _temp1
;
; temp2 = temp6 >> 8; // high byte x
;
	lda     _temp6+1
	sta     _temp2
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L000B
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L000B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp2&1; // high byte
;
	lda     _temp2
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0002
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else{
;
	jmp     L0007
;
; collision = c_map2[coordinates];
;
L0002:	ldy     _coordinates
	lda     _c_map2,y
L0007:	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L0002
	inx
L0002:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; set_data_pointer(Rooms[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0012
	inx
	clc
L0012:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L0005
	cmp     #$01
	beq     L0007
	cmp     #$02
	jeq     L000A
	jmp     L000D
;
; address = get_ppu_addr(nt, x, 0);
;
L0005:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L0017
;
; address = get_ppu_addr(nt, x, 0x40);
;
L0007:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L0017
;
; address = get_ppu_addr(nt, x, 0x80);
;
L000A:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L0017
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L000D:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L0017:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; room = ((scroll_x >> 8) +1); //high byte = room, one to the right
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room
;
; map = room & 1; //even or odd?
;
	and     #$01
	sta     _map
;
; if(!map){
;
	lda     _map
	bne     L0003
;
; memcpy (c_map, Rooms[room], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
;
; else{
;
	jmp     L001C
;
; memcpy (c_map2, Rooms[room], 240);
;
L0003:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
L001C:	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L0009
	inx
	clc
L0009:	adc     #<(_Rooms)
	sta     ptr1
	txa
	adc     #>(_Rooms)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palTitle);
;
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_bg
;
; pal_spr(palTitle);
;
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; song = 0;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; load_room();
;
	jsr     _load_room
;
; scroll_y = 0xff;
;
	ldx     #$00
	lda     #$FF
	sta     _scroll_y
	stx     _scroll_y+1
;
; set_scroll_y(scroll_y); // shift the bg down 1 pixel
;
	jsr     _set_scroll_y
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; fade_in();
;
	jsr     _fade_in
;
; music_play(song+1);
;
	lda     _song
	clc
	adc     #$01
	jsr     _music_play
;
; ppu_wait_nmi();
;
L0003:	jsr     _ppu_wait_nmi
;
; set_music_speed(8);
;
	lda     #$08
	jsr     _set_music_speed
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; movement();
;
	jsr     _movement
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1) 
;
	jmp     L0003

.endproc

